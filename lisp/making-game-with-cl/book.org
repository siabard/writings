* 프로젝트의 설정

=(defsystem)= 으로 프로젝트를 설정한다.

#+BEGIN_SRC lisp
(asdf:defsystem #:leda
  :description "Describe leda here"
  :author "Your Name <your.name@example.com>"
  :license  "Specify license here"
  :version "0.0.1"
  :serial t
  :depends-on (#:trivial-gamekit)
  :components ((:file "package")
               (:file "leda")))
#+END_SRC


문제는 해당 파일을 일일이 만드는 것이 쉽지 않다는 점이다. 이를 간단히 하려면 =quickproject= 를 이용한다.

** quickproject 의 설치

   Common Lisp의 패키지 관리는 =quicklisp= 을 이용하면 편하다. 

* 게임의 시작

  게임 루프를 만들어 실행해야한다. 이 때 =trivial-gamekit= 으로 게임
  시스템을 만들어야한다.

#+BEGIN_SRC lisp
(gamekit:defgame main-game () ())
#+END_SRC

위의 =defgame= 이 게임의 시스템을 만드는 역할을 한다. 메인 게임
클래스라고 보면된다. 이 메인 클래스를 통해 게임을 실행하고, 각종
처리가 일어나게 된다.

** 게임 실행

   =(gamekit:start 'main-game)= 를 실행하면 =main-game= 클래스로
   설정되는 게임이 실행된다.

 
** 게임 루프

   게임의 매 프레임이 진행되는 때에는 게임 클래스의 두 함수가
   호출된다. =gamekit:act= 와 =gamekit:draw= 이다. 해당 함수는
   =defmethod= 를 통해  구성된다.

#+BEGIN_SRC lisp
(defmethod gamekit:act ((app leda-game))
  ;;;; update logic
  ... )

(defmethod gamekit:draw ((app leda-game))
  ;;;; render game
  ... )

#+END_SRC

** Delta time

   Common Lisp 에서는 현재 시간의 틱을 알려주는
   =get-internal-real-time= 가 있다. 해당 메서드를 실행하면 현재
   시간을 돌려주므로, 기존의 시간과 현재 시간을 빼면 경과시간(delta
   time)을 찾아낼 수 있다.

#+BEGIN_SRC lisp
   
(defparameter *last-time* 0)
(defparameter *delta-time* 0.0)


(defmethod gamekit:act ((app leda-game))
  ;;;; update logic
  (let ((current-time (get-internal-real-time)))
    (when (> current-time *last-time*)
      (progn
	(setf *delta-time* (/ (- current-time *last-time*)) 1000000.0)
	(setf *last-time* current-time)))))

#+END_SRC

위와 같은 코드를 짜면 =*delta-time*= 에는 전 프레임과 현재 프레임의
차이가 들어간다. 16667 ms 정도의 값이 나오는데, 이 값은 0.016초에
해당하며, 초당 60 프레임에 해당한다.

즉 해당 값의 1/1000_000 만큼이 변경을 위한 증분이 된다.
