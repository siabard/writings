* 매크로

자동으로 Lisp 코드를 생성하는 방식 중 가장 좋은 방법은 매크로를 이용하는 것이다.

** 매크로 예

#+BEGIN_SRC lisp

  (defmacro double-list (a-list)
    (let ((ret (gensym)))
      `(let ((,ret nil))
         (dolist (x ,a-list)
           (setq ,ret (append ,ret (list x x))))
         ,ret)))

  ;; use macro
  (defun test (x)
    (double-list x))

#+END_SRC

여기에서 나오는 백쿼트(=`=)는 리스트를 특별한 방식으로
이용하게된다. 리스트 내 콤마(=,=)로 시작되는 항목만 평가되며 그 외
어떤 것도 평가되지않는다.

위의 경우 =,a-list= 는 인수로 전달되는 항목이 매크로 확장시 변경되어
들어간다.

** Slicing 사용하기

#+BEGIN_SRC lisp

  (defmacro double-args (&rest args)
    `(let ((ret nil))
       (dolist (x ,@args)
         (setq ret (append ret (list x x))))
       ret))

  (defun test (&rest x)
    (double-args x))
    
#+END_SRC

=,@= 는 리스트 인수를 대치할 때 이용된다.

** MACRO Expand

정의된 매크로 내용을 확인하고 싶다면 =macroexpand-1= 을 이용한다.

#+BEGIN_SRC lisp

  (defmacro double (a-number)
    (list '+ a-number a-number))

  ;; 결과는 (+ N N) 이 나온다.
  ;; 값이 평가되지않고 형태 그대로 나오는 것에 유의
  
  (macroexpand-1 '(double n))

#+END_SRC
