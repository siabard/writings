* 전역변수

전역변수는 보통 =*= 을 붙여서 표현한다.

#+BEGIN_SRC lisp
  (defvar *x* "cat")
  (setq *x* "dog")
#+END_SRC

Lisp은 기본적으로 타입이 없지만 값은 타입이 있다. 즉 값을 변수에 할당하는 것으로 타입이 결정되는 것이다.

위에서 =*x*= 에 문자열을 할당했는데, 이런 행위로 =*x*= 의 타입이 문자열로 정해진다.

* 타입의 계층

Lisp의 타입은 다음과 같은 계층을 가진다.

#+BEGIN_SRC

  t
    sequence
      list
      array
        vector
          string
    number
      float
      rational
        integer
        ratio
      complex
    character
    symbol
    structure
    function
    hash-table

#+END_SRC

=typep= 함수를 통해 값이나 표현식이 가지는 타입을 테스트할 수 있으며, =type-of= 를 통해 값의 타입 정보를 알아올 수 있다.

* 특별한 값 =*=

Common Lisp 에서는 =*= 를 직전 표현식의 평가값으로 이용할 수 있다. 종종 Lisp의 프롬프트로 =*= 를 쓰기 대문에 혼동할 수 있어 주의가 필요하다.

* Lexical Scope

Common Lisp에서 변수 선언과 함수 정의는 중첩이 가능하며, 동일한 변수
이름을 중첩된 =let= 폼에서 사용할 수 있다. 변수가 사용된다면, 현재
=let= 폼에서 바깥쪽으로 해당 변수를 찾아 나간다.

=defun= 의 경우 전역으로 사용되는 함수를 만들기 때문에, 지엽적으로
사용하고자한다면 =flet= 이나 =labels= 를 사용한다.

#+BEGIN_SRC lisp

  (let ((x 1)
        (y 2))
    (flet ((test (a b)
             (let ((z (+ a b)))
               (flet ((nested-function (a)
                        (+ a a)))
                 (nested-function z)))))
      (format t "test result is ~A~%" (test x y))))

  (let ((z 10))
    (labels ((test-recursion (a)
               (format t "test-recursion ~A~%" (+ a z))
               (if (> a 0)
                   (test-recursion (- a 1))))
             (test-recursion 5)))

#+END_SRC

재귀함수를 이용하는데는 =labels= 를 이용한다.

* 파일 읽어들이기

=load= 함수는 소스 파일을 읽어들이는데 사용한다.

#+BEGIN_SRC lisp

  (load "./code/nested.lisp")
  
#+END_SRC


* 배열 선언하기

=make-array= 함수를 사용해서 변수를 만든다.

#+BEGIN_SRC lisp

  (setq v1 (make-array '(3)))
  (setq v2 (make-array '(4) :initial-element "hi"))
  (setq v3 #(1 2 3 4 "hello" '(99 100)))

#+END_SRC

배열의 각 요소에 접근하려면 =aref= 함수를 사용한다.

#+BEGIN_SRC lisp

  (aref v3 3) ; 4를 반환한다. 첨자는 0부터 시작한다.
  (aref v3 5) ; '(99 100) 을 반환한다.
  
#+END_SRC

배열의 첨자는 0에서부터 시작한다는 점을 기억하자.

지금까지 변수의 값을 설정하는데 =setq= 를 썼다면, 보다 일반적인 버전인
=setf= 를 쓸 때가 되었다. =setf= 는 리스트, 배열, 해시 테이블 등 모든
부문에 걸쳐 이용이 가능하다.

#+BEGIN_SRC lisp

  (setf (aref v1 1) "this is a test")

#+END_SRC

* Symbol

Common Lisp 패키지쪽에서 좀 더 자세히 알아볼 수 있지만, 일단은 변수의 이름을 지칭한다정도로 알고 있어도 무방하다.

=defvar= 의 반환값이 정의된 심볼을 값으로 반환한다는 점에
주의한다. Symbol은 항상 대문자로 전환된다. 단 symbol 명에 공백을 넣고
싶은 경우는 제외한다. 이런 경우에는 =|= 을 써서 정의한다.

#+BEGIN_SRC lisp

  (defvar |a symbol with Space Character| 3.14159 )

#+END_SRC

* List

리스트는 Common Lisp의 근본적인 데이터 구조이다. Lisp에서 cons라는 셀은 두 개의 포인터를 담는 데이터 구조이다.
일반적으로, 첫번째 포인터가 리스트의 첫번째 요소를 가르키고, 두번째 포인터는 원래 리스트의 나머지의 시작을 가르킨다.

그렇기때문에 일반적인 cons에 두 요소를 넣게 되면 조금 다르게 해석된다.

#+BEGIN_SRC lisp
  (cons 1 2) ; 이 경우 (1 . 2) 식으로 고정된 tuple 처럼 정의된다.

  (cons 1 '(2 3 4)) ; (1 2 3 4) 로 리스트가 된다.
#+END_SRC

** CAR / CDR

=car= 과 =cdr= 은 각기 cons의 앞부분과 뒷부분에 대응한다. 보다 세세한
조작을 위해 =cxxr=, =cxxxr=, =cxxxxr= 형식으로 사용된다. =x= 자리에는
=a= 나 =d= 가 올 수 있는데, 해당하는 조합에 맞는 모든 함수가
정의되어있다.

=car= , =cdr= 조합보다 좀 더 편리하게 쓰기 위해 =first=, =second=,
=third=, =fourth=, =rest= 등의 함수가 제공된다.

보다 일반적인 함수는 =nth= 가 있다.

#+BEGIN_SRC lisp

  (nth 0 v1) ; (car v1), (first v1)과 동일
  (nth 1 v1) ; (cadr v1), (second v1)과 동일

#+END_SRC

** CONS / APPEND

리스트를 확장하는 방식으로 =cons= 와 =append= 를 들 수 있다. =cons= 가
atom 객체를 리스트에 붙이는 것이라면 =append= 는 두 리스트를 결합하는 것이 차이라고 하겠다.

#+BEGIN_SRC lisp

  (cons 'first l1)

  (append l1 l2)

#+END_SRC


* Array 와 Vector

리스트에서 개별 객체에 접근하는 것이 그다지 쉽지는 않다. 일단 리스트의
모든 데이터는 링크리스트로 저장되기 때문에 크기가 커질 수록 점점 그
효율이 떨어지게 된다.

Arry와 Vector는 데이터를 일련의 연속된 데이터 공간에 저장하기 때문에,
데이터의 관리가 더 효율적이다.

#+BEGIN_SRC lisp

  (defvar x (make-sequence 'vector 5 :initial-element 0))
  
#+END_SRC

위에서 보이듯이 vector를 만들기 위해서는 =make-sequence= 를 이용하면
된다. 1차원 배열을 Vector라고 부르기 때문에, 실제로 Array와 Vector의
구분인 이 것외에는 없다.

다차원 배열을 만들기위해서는 =make-array= 를 사용한다.

#+BEGIN_SRC lisp

  ;; 아래 결과는 ((1 1 1) (1 1 1)) , 즉 2x3 매트릭스
  (defvar y (make-array '(2 3) :initial-element 1))

#+END_SRC

물론 =make-sequence= 대신 =make-array= 가지고 간단하게 만들 수도
있다. 그것도 귀찮다면 =vector= 함수를 사용해도 된다.

#+BEGIN_SRC lisp

  ;; 배열의 차원을 설정하는 부분을 정수로 하면 1차원 배열 - vector가 나온다.
  (make-array 10)

  ;; 아니면 그냥 vector 쓴다.
  (vector 1 2 3 'cat)
  
#+END_SRC

=aref= 함수를 써서 개별 요소에 접근할 때 쓴다. 첫번째 인수로 배열을, 남은 인수로는 배열의 인덱스를 삼는다.

#+BEGIN_SRC lisp

  ;; 1차원 배열에서 3번째 요소
  (aref x 2)

  ;; 2차원 배열에서 2행, 3열의 요소
  (aref y 1 2)

#+END_SRC


* 문자열

문자열은 배열을 이용하여 구성되어있다. 문자열에 관련한 방식은 다음과 같다.

#+BEGIN_SRC lisp

  ;; 문자열 만들기
  (defvar s1 "the cat ran up the tree")

  ;; 문자열 결합하기
  (concatenate 'string s1 space "up the tree")

  ;; 문자열 검색하기 / 찾지못하면 NIL반환
  (search "ran" s1)

#+END_SRC


=search= 함수는 다양한 옵션을 제공해준다. 시작지점을 지정하거나, 검색을 원하는 문자열의 일부분을 지정할 수 있다.

#+BEGIN_SRC lisp

  (search search-string a-logner-string
          :from-end :test
          :test-not :key
          :start1 :start2
          :end1 :end2)

#+END_SRC

=:start1= 과 =:end1= 은 =search-string= 의 시작부터 끝을, =:start2= 와
=:end2= 는 =a-longer-string= 의 시작, 끝을 지정한다.

문자열의 일부만 추출할 때는 =subseq= 를 이용하면 된다.

#+BEGIN_SRC lisp

  ;; 시작점만 지정하면 마지막까지의 문자열을 반환한다.
  (subseq s1 8)

  ;; 아래와 같이 끝점을 지정하면 8~10 까지의 문자열을 반환한다.
  (subseq s1 8 11)

#+END_SRC


이외에도 다양한 문자열 관련 함수가 존재하는데

#+BEGIN_SRC lisp

  ;; 공백을 삭제하는 함수 
  (string-trim '(#\space #\z #\a) " a boy said pez")

  ;; 대문자로 전환
  (string-upcase "The dog bit the cat.")

  ;; 소문자로 전환
  (string-downcase "The boy said WOW!")
  
#+END_SRC

등이 있다.

* 동등성(Equality)

변수가 동일한지를 호가인하는 방법은 다양하다. =eq= 함수의 경우 두
변수가 메모리의 동일 데이터를 참조하고 있는지를 확인한다. =eql= 함수는
같은 주소의 데이터인지, 혹은 같은 숫자나 문자인지 검사한다. =equal= 은
좀 더 관대한 편으로, 두 값을 평가하여 동일한 값을 출력하는지를 놓고
동등성을 검사한다. 좀 더 형식적으로 말하자면, =equal= 은 =car= 과
재귀적으로 =cdr= 을 수행해서 그 값의 일치여부를 판단한다.

#+BEGIN_SRC lisp

  (defvar x '(1 2 3))
  (defvar y '(1 2 3))

  ;; eql 로 비교하면 두 변수는 같지 않다.
  (eql x y)

  ;; equals로 비교하면 두 변수는 같은 값을 가지므로 같다.
  (equal x y)

#+END_SRC


문자열의 경우 =string== 을 사용하면 좀 더 효과적이다.

#+BEGIN_SRC lisp

  (string= "cat" "cat")

#+END_SRC

Common Lisp 의 문자열이 일련의 문자이기 때문에, =char= 함수로 개별 문자를 문자열에서 추출할 수 있다.

#+BEGIN_SRC lisp

  (char s1 0)
  
#+END_SRC


* Hash Table

해시테이블은 아주 유용한 데이터 타입이다. =assoc= 함수와 리스트를 쓰는
것으로 동일한 효과를 얻을 수 있지만, 해시 테이블은 리스트가 많은 요소를 가지고 있을 때 더 유용하다.

#+BEGIN_SRC lisp

  (defvar x '((1 2) ("animal" "dog")))

  (assoc 1 x)

  (assoc "animal" x :test #'equal)

#+END_SRC

기본적으로 =assoc= 의 테스트 방식은 =eql= 을 사용한다. 그렇기때문에
문자열로 키값을 쓰고 싶은 경우에는 별도로 =:test #'equals= 이라고 값을 검증할 때 별도로 지정이 필요하다.

기본적으로 해시 테이블도 키값의 일치여부를 확인할 때 =eql= 을 쓰기는
한다. 해시 테이블을 생성하는 것은 =make-hash-table= 함수를
사용한다. 이 때 =:test= 에 사용할 함수를 지정할 수 있다.

#+BEGIN_SRC lisp

  (defvar h (make-hash-table))

  ;; 키 1 에 값 2를 지정
  (setf (gethash 1 h) 2)

  ;; 키 "animal"에 값 "dog"를 지정
  (setf (gethash "animal" h) "dog")

  ;; 2가 나옴
  (gethash 1 h)

  ;; NIL
  (gethash "animal" h)

  (defvar g (make-hash-table :test #'equal))

  ;; 키 "animal"에 값 "dog"를 지정
  (setf (gethash "animal" g) "dog")

  ;; "dog" 반환
  (gethash "animal" g)

#+END_SRC

키, 값 쌍을 반복하고자한다면 =maphash= 함수를 사용한다.

#+BEGIN_SRC lisp

  (defun my-print (a-key b-value)
    (format t "key: ~A value: ~A~%" a-key b-value))

  (maphash #'my-print h)

#+END_SRC

몇 가지 유용한 해시테이블 관련 함수는 아래와 같다.

#+BEGIN_SRC lisp

  ;; 해시 테이블 크기를 반환
  (hash-table-count h)

  ;; 키-값 쌍 제거
  (remhash "animal" h)

  ;; 해시안의 키-값 전부 지우기
  (clrhash h)

#+END_SRC

* EVAL

=eval= 은 매우 특별한 함수이다. 해당 함수는 제공된 인수를 Lisp 표현식으로 평가한다.

#+BEGIN_SRC lisp

  ;; 15를 반환한다. (+ 1 2 3 4 5) 한 것과 동일한 결과를 낸다.
  (eval '(+ 1 2 3 4 5))

#+END_SRC

Lisp의 유명한 모토 "data is code"를 여기에서 알 수 있다.

